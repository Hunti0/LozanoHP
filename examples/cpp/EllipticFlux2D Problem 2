
#include <iostream>
#include <armadillo>
#include <cmath>

#include "mole.h"
#include <vector>

using namespace arma;
using std::cout;
using std::endl;

double exact_u(double x, double y) {
    const double lambda = 1.0;
    return std::exp(lambda * (x + y) / 2.0) / (std::exp(lambda) - 1.0);
}

double rhs_f(double x, double y) {
    const double lambda = 1.0;
    return (lambda * lambda) * std::exp(lambda * (x + y) / 2.0) / (2.0 * (std::exp(lambda) - 1.0));
}

int main() {
    std::vector<u32> Ns = {10, 20, 40, 80};
    u16 k = 2; 
    cout << "Grid Size\tL2 Error\tRate" << endl;
    double prev = 0.0;

    for (size_t ni = 0; ni < Ns.size(); ++ni) {
        u32 m = Ns[ni], n = Ns[ni];
        double Lx = 1.0, Ly = 1.0;
        double dx = Lx / (m + 1), dy = Ly / (n + 1);

        vec x = linspace(0.0, Lx, m + 2);
        vec y = linspace(0.0, Ly, n + 2);

        // Build analytic solution and RHS on grid
        vec uex((m+2)*(n+2)), f((m+2)*(n+2));
        for (u32 i = 0; i < m + 2; ++i)
            for (u32 j = 0; j < n + 2; ++j) {
                u32 idx = i * (n + 2) + j;
                uex(idx) = exact_u(x(i), y(j));
                f(idx)   = rhs_f(x(i), y(j));
            }

        // Assemble Laplacian operator
        Laplacian L(k, m, n, dx, dy);
        sp_mat Amat = static_cast<sp_mat>(L);

        // Reaction term
        const double lambda = 1.0;
        for (u32 idx = 0; idx < (m+2)*(n+2); ++idx)
            Amat(idx, idx) += lambda;

        // Robin boundary condition parameters
        const double alpha = -std::exp(lambda);
        const double beta  = (std::exp(lambda) - 1.0) / lambda;
        sp_mat BCmat = static_cast<sp_mat>(
            RobinBC(k, m, dx, n, dy, alpha, beta));
        Amat = Amat + BCmat;


        vec sol = spsolve(Amat, f);

        // Compute global L2 error
        double err = norm(sol - uex, 2) / norm(uex, 2);

        cout << m << "x" << n << "\t" << err;
        if (ni > 0) cout << "\t" << std::log2(prev / err);
        cout << endl;
        prev = err;
    }
    return 0;
}
